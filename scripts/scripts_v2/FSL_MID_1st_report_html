#!/bin/bash

ahrb=/nfs/turbo/ahrb-data

source $ahrb/Scripts/source/ahrb_config

work_dir=/nfs/turbo/ahrb-data/work_dir

fsl=/nfs/turbo/ahrb-data/FSL_Analysis


#Quality Check file
Image_Q=$fsl/QA/$1/firstlevel_report.csv

#Subject list
list=$fsl/QA/$1/firstlevel_review.txt

# Today's date
date=$(date)

echo
echo "Hi ${USER}, " 
echo "Weclome to the FSL Firstl Level report review script!"
echo "This script will cycle through subjects and their runs in: $list "
echo "Reminder:"
echo "		1) Review the registration tab and evaluate whether there"
echo "		   is good alignment between highres, function with MNI  "
echo "		   image (e.g., ventricles align, no egregious errors    "
echo "		2) Review pre-stats tab. These are MCFLIRT motion results"
echo "		   confirm that the tranlations don't excess 1mm and FD  "
echo "		   doesn't exceed .8/.9					 "
echo "		3) Review stats tab. This is the design matrix	 	 "
echo "		   The first is the matrix include conditions and motion "
echo "		   parameters (6 + their derivates). Confirm nothing odd "
echo "		   is happening. Then, confirm the task in lower image is"
echo "		   not showing conditions that excessive correlate with  "
echo "		   other conditions or other motions parameters		 "
echo "*Note the issues with 1, 2 or 3 when prompted. 			 "
echo 
echo 

## Script pauses or 'sleeps' for 5 seconds, before continuing.
sleep 5 

# The below cycles through all subjects and their folders.
# It opens the feat report.html for each subject's run in firefox
# The script prompts user to indicate if there were issues with the 1-3 items discussed above
# It uses the read value to collect the response, that'll then be exported into a .csv for closer examination

#For each subject, perform.....for each run (01 02)
for subj in $(cat $list ) ; do
	subj_header $subj
	
	for run in 01 02 ; do
	echo	
	echo "Run ${run}"
	echo

        if [ -s $fsl/Subjects/$subj/model/FirstLevel/run_${run}.feat/report.html ] ; then
	
	firefox $fsl/Subjects/$subj/model/FirstLevel/run_${run}.feat/report.html &

sleep 1

        
# Input for registration/normalization. Provide inpurt to 'read' if yes, request more info, no, proceeds, e, exits.
	echo -n "Any problems with registration or normalization [y= yes; n = no; to e = exit ]? "
                read regist
		# take the answer provided, cut to take only the first letter, upper and lowercase        
	        answer=$(echo $regist | cut -c 1 | tr '[A-Z]' '[a-z]')
       
	case $regist in
                'n')
                        indent "$subj Coreg/Normalization = ${gre}GOOD${recol}"
                        echo
                        indent "${subj}\tCoregNorm\trun_${run}.feat\tGood\t${date}\t${USER}" >> $Image_Q
                        ;;
                'y')
                        indent "You indicated that Coreg/Normalization for $subj = BAD"
                       
			echo "Please provide a brief description of problem. Only use spaces and periods." 
			echo -n "Hit Return when complete.  "
                       
			read registprob
                        indent "$subj CoregNorm = ${bred}BAD. Reason: $registprob${recol}"
                        indent "${subj}\tCoregNorm\trun_${run}.feat\tBad\t${date}\t${USER}\t$registprob" >> $Image_Q
                        echo
                        ;;
                'e')
			echo                        
			echo "....Quitting"
                        exit 1
                        ;;
        esac
echo

# Input for MCFLIRT/Motion pre-stats tab
	echo -n "Is FD > .8 or translation > 1mm (pre-stats tab) [y= yes; n = no; to e = exit ]? "
                read mcflirt
		# take the answer provided, cut to take only the first letter, upper and lowercase        
	        answer=$(echo $mcflirt | cut -c 1 | tr '[A-Z]' '[a-z]')

	case $mcflirt in
                'n')
                        indent "$subj MCFLIRT Motion = ${gre}GOOD${recol}"
                        echo
                        indent "${subj}\tMCFLIRT\trun_${run}.feat\tGood\t${date}\t${USER}" >> $Image_Q
                        ;;
                'y')
                        indent "You indicated that MCFLIRT Motion = BAD"
                       
			echo "Please provide a brief description of problem. Only use spaces and periods." 
			echo -n "Hit Return when complete.  "
                        
			read mcflirtprob
                        indent "$subj MCFLIRT Motion = ${bred}BAD. Reason: $mcflirtprob${recol}"
                        indent "${subj}\tMCFLIRT\trun_${run}.feat\tBad\t${date}\t${USER}\t$mcflirtprob" >> $Image_Q
                        echo
                        ;;
                'e')
			echo                        
			echo "....Quitting"
                        exit 1
                        ;;
        esac
echo
# Input for design matrix stats tab
	echo -n "Are there issues with design matrix (correl: conditions/motion para) [y= yes; n = no; to e = exit ]? "
                read design
		# take the answer provided, cut to take only the first letter, upper and lowercase        
	        answer=$(echo $design | cut -c 1 | tr '[A-Z]' '[a-z]')

	case $design in
                'n')
                        indent "$subj Design Matrix = ${gre}GOOD${recol}"
                        echo
                        indent "${subj}\tDesignMatrix\trun_${run}.feat\tGood\t${date}\t${USER}" >> $Image_Q
                        ;;
                'y')
                        indent "You indicated that Design Matrix = BAD"
                       
			echo "Please provide a brief description of problem. Only use spaces and periods." 
			echo -n "Hit Return when complete.  "
                        
			read designprob
                        indent "$subj Design Matrix = ${bred}BAD. Reason: $designprob${recol}"
                        indent "${subj}\tDesignMatrix\trun_${run}.feat\tBad\t${date}\t${USER}\t$designprob" >> $Image_Q
                        echo
                        ;;
                'e')
			echo                        
			echo "....Quitting"
                        exit 1
                        ;;
        esac
	else
                indent "${bred}For $subj - no *FirstLevel/run_${run}.feat/report_log.html${recol}"
        fi

done 


# Remove subject from list before continuing.
sed -i "/${subj}/d" $list

togo=$(cat $list | wc -l )
echo
echo "${togo} subjects to go in the list"
echo

done
